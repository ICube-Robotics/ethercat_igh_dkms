#!/usr/bin/env python3
import os
import subprocess
import sys
import re
import importlib.util
import shutil
import traceback
from typing import Tuple


def get_poetry_version(poetry_path: str) -> tuple[int, int, int]:
    try:
        result = subprocess.run(
            [poetry_path, '--version'],
            check=True,
            stdout=subprocess.PIPE,
            stderr=subprocess.STDOUT,
            text=True
        )
        s = result.stdout
        # Check for the version string in the form of 'Poetry ( version i.j.k )'
        # taking whatever space is there each time there is a space
        # and being case insensitive
        reg = r'Poetry\s*\(\s*version\s*(\d+)\.(\d+)\.(\d+)\s*\)'
        match = re.search(reg, s, re.IGNORECASE)
        if match:
            return tuple(map(int, match.groups()))
        else:
            return None
    except Exception as e:
        return None


def find_poetry_binary() -> str:
    modern_install_path = '/root/.local/bin'
    modern_version = None
    poetry_modern_path = None
    poetry_env_path = None
    env_version = None
    poetry_path = None
    # Test if modern_install_path exists
    if os.path.exists(modern_install_path):
        # Test if poetry is installed in the modern install path
        if 'poetry' in os.listdir(modern_install_path):
            # test if poetry is an executable
            poetry_modern_path = os.path.join(modern_install_path, 'poetry')
            if os.access(poetry_modern_path, os.X_OK):
                try:
                    modern_version = get_poetry_version(poetry_modern_path)
                except Exception as e:
                    modern_version = None
    # Test if poetry is installed in the system path
    # print("Finding poetry binary...")
    try:
        poetry_env_path = shutil.which('poetry')
        try:
            env_version = get_poetry_version(poetry_env_path)
        except Exception as e:
            env_version = None
    except Exception as e:
        poetry_env_path = None
        env_version = None
    #
    if modern_version is not None and env_version is None:
        poetry_path = poetry_modern_path
    elif env_version is not None and modern_version is None:
        poetry_path = poetry_env_path
    elif env_version is not None and modern_version is not None:
        if env_version > modern_version:
            poetry_path = poetry_env_path
        else:
            poetry_path = poetry_modern_path
    else:
        # both versions are undefined
        imsg = "Warning: impossible to get poetry version"
        print(imsg)
        if poetry_modern_path is not None:
            poetry_path = poetry_modern_path
        elif poetry_env_path is not None:
            poetry_path = poetry_env_path
        else:
            # poetry is not installed
            imsg = "Error: 'poetry' is not installed.\nPlease install 'poetry' to continue."
            print(imsg)
            raise Exception(imsg)
    # print("\tPoetry binary found at: ", poetry_path)
    return poetry_path


def import_module_from_path(module_name: str, file_path: str, add_to_sys_modules: bool = False):
    # Create a module spec from the file location
    spec = importlib.util.spec_from_file_location(module_name, file_path)
    if spec is None:
        raise ImportError(f"Cannot find module {module_name} at {file_path}")

    # Create a new module based on the spec
    module = importlib.util.module_from_spec(spec)

    # Execute the module in its own namespace
    spec.loader.exec_module(module)

    if add_to_sys_modules:
        # Optionally, add the module to sys.modules
        sys.modules[module_name] = module

    return module


def exec_cmd(cmd: list) -> Tuple[int, str]:
    str_cmd = " ".join(cmd)
    current_dir = os.getcwd()
    print(
        f"Executing command: «{str_cmd}» from directory: {current_dir}", flush=True)
    res = ""
    with subprocess.Popen(
        cmd,
        stdout=subprocess.PIPE,
        stderr=subprocess.STDOUT
    ) as process:
        while True:
            text = process.stdout.read1().decode("utf-8")
            text1 = text.strip()
            if "" != text1:
                res += text
                print(text1, flush=True)
            c = process.poll()
            if c is not None:
                return c, res


def display_error_message_and_exit(cmd: str):
    print(f"Installation with command: {cmd} failed.", flush=True)
    print("You can check extensive logs in the file: /var/log/ethercat_igh_dkms/ethercat_igh_install.init.log", flush=True)
    print("You can rerun this script after resolving any issues.", flush=True)
    sys.exit(1)


def install_igh_ethercat():
    print("")
    print("###############################################")
    print("Installer for EtherCAT IgH Master and tools ...")
    print("###############################################\n")

    poetry_path = find_poetry_binary()

    proj_dir = '/usr/share/ethercat_igh_dkms'

    # Navigate to the project directory
    os.chdir(proj_dir)

    # Prepare the command to run
    # Include all command-line arguments passed to this script (excluding the script name)
    cmd = [poetry_path, 'run', 'init'] + sys.argv[1:]

    # Run the initialization using Poetry
    try:
        c, result = exec_cmd(cmd)
        if c != 0:
            cmd = " ".join(cmd)
            display_error_message_and_exit(cmd)
    except Exception as e:
        trace = " ".join(
            traceback.TracebackException.from_exception(e).format())
        print(trace, flush=True)
        display_error_message_and_exit(cmd)


def main():
    # Check if running as root
    if os.geteuid() != 0:
        print("This script must be run as root.")
        sys.exit(1)

    # poetry_install()
    install_igh_ethercat()


if __name__ == '__main__':
    main()
