#!/usr/bin/env python3
import os
import subprocess
import sys
import re
import importlib.util
import traceback
import shutil
from pathlib import Path


def import_module_from_path(module_name: str, file_path: str, add_to_sys_modules: bool = False):
    # Create a module spec from the file location
    spec = importlib.util.spec_from_file_location(module_name, file_path)
    if spec is None:
        raise ImportError(f"Cannot find module {module_name} at {file_path}")

    # Create a new module based on the spec
    module = importlib.util.module_from_spec(spec)

    # Execute the module in its own namespace
    spec.loader.exec_module(module)

    if add_to_sys_modules:
        # Optionally, add the module to sys.modules
        sys.modules[module_name] = module

    return module


def get_poetry_version(poetry_path: str) -> tuple[int, int, int]:
    try:
        result = subprocess.run(
            [poetry_path, '--version'],
            check=True,
            stdout=subprocess.PIPE,
            stderr=subprocess.STDOUT,
            text=True
        )
        s = result.stdout
        # Check for the version string in the form of 'Poetry ( version i.j.k )'
        # taking whatever space is there each time there is a space
        # and being case insensitive
        reg = r'Poetry\s*\(\s*version\s*(\d+)\.(\d+)\.(\d+)\s*\)'
        match = re.search(reg, s, re.IGNORECASE)
        if match:
            return tuple(map(int, match.groups()))
        else:
            return None
    except Exception as e:
        return None


def find_poetry_binary() -> str:
    modern_install_path = '/root/.local/bin'
    modern_version = None
    poetry_modern_path = None
    poetry_env_path = None
    env_version = None
    poetry_path = None
    # Test if modern_install_path exists
    if os.path.exists(modern_install_path):
        # Test if poetry is installed in the modern install path
        if 'poetry' in os.listdir(modern_install_path):
            # test if poetry is an executable
            poetry_modern_path = os.path.join(modern_install_path, 'poetry')
            if os.access(poetry_modern_path, os.X_OK):
                try:
                    modern_version = get_poetry_version(poetry_modern_path)
                except Exception as e:
                    modern_version = None
    # Test if poetry is installed in the system path
    print("Finding poetry binary...")
    try:
        poetry_env_path = shutil.which('poetry')
        try:
            env_version = get_poetry_version(poetry_env_path)
        except Exception as e:
            env_version = None
    except Exception as e:
        poetry_env_path = None
        env_version = None
    #
    if modern_version is not None and env_version is None:
        poetry_path = poetry_modern_path
    elif env_version is not None and modern_version is None:
        poetry_path = poetry_env_path
    elif env_version is not None and modern_version is not None:
        if env_version > modern_version:
            poetry_path = poetry_env_path
        else:
            poetry_path = poetry_modern_path
    else:
        # both versions are undefined
        imsg = "Warning: impossible to get poetry version"
        print(imsg)
        if poetry_modern_path is not None:
            poetry_path = poetry_modern_path
        elif poetry_env_path is not None:
            poetry_path = poetry_env_path
        else:
            # poetry is not installed
            imsg = "Error: 'poetry' is not installed.\nPlease install 'poetry' to continue."
            print(imsg)
            raise Exception(imsg)
    print("\tPoetry binary found at: ", poetry_path)
    return poetry_path


def find_poetry_path() -> str:
    poetry_binary = find_poetry_binary()
    if poetry_binary is None:
        imsg = "Error: 'poetry' is not installed.\nPlease install 'poetry' to continue."
        print(imsg)
        raise Exception(imsg)
    poetry_path = Path(poetry_binary).parent
    return str(poetry_path)


def download_and_update_to_last_poetry_version(log_file):
    imsg = "Downloading and installing last poetry version..."
    print(imsg, flush=True)
    log_file.write(imsg+"\n")
    curl_path = shutil.which('curl')
    try:
        install_cmd = [
            curl_path, '-sSL', 'https://install.python-poetry.org',
            '|', 'python3', '-']
        cmd = " ".join(install_cmd)
        result = subprocess.run(cmd,
                                shell=True,
                                check=True,
                                stdout=log_file,
                                stderr=subprocess.STDOUT,
                                text=True
                                )
        imsg = "Last poetry version installed successfully."
        print(imsg, flush=True)
        log_file.write(imsg+"\n")
    except Exception as e:
        stdin = subprocess.PIPE
        imsg = f"Error: '{cmd}' failed."
        print(imsg, flush=True)
        imsg = imsg + " ".join(
            traceback.TracebackException.from_exception(e).format())
        log_file.write(imsg+"\n")
        raise e


def poetry_install(log_file):
    imsg = "Running 'poetry install' to set up the project dependencies..."
    print(imsg)
    log_file.write(imsg+"\n")
    inst_dir = '/usr/share/ethercat_igh_dkms'

    try:
        # Navigate to the project directory
        os.chdir(inst_dir)

        # Ensure 'poetry' is installed, find its path
        poetry_path = find_poetry_path()

        # import poetry_binary variable from parameters.py
        parameters_path = os.path.join(
            inst_dir, 'ethercat_igh_dkms', 'parameters.py')
        module_name = 'params'
        params = import_module_from_path(module_name, parameters_path)
        imsg = f"Poetry binary path from parameters.py: {params.poetry_binary_dir}"
        log_file.write(imsg+"\n")
        imsg = f"Poetry binary path from find_poetry_path: {poetry_path}"
        log_file.write(imsg+"\n")

        if params.poetry_binary_dir != poetry_path:
            imsg = "Updating poetry path in parameters.py..."
            print(imsg)
            log_file.write(imsg+"\n")
            # Update parameters.py with the correct poetry path
            content = None
            with open(parameters_path, 'r') as f:
                content = f.read()
                # create regex to find the line that defines the poetry path it sets the variable poetry_binary_dir so any number of spaces can be before or after the equals sign
                content = re.sub(r'poetry_binary_dir\s*=\s*.*',
                                 f'poetry_binary_dir = "{poetry_path}"', content)
            with open(parameters_path, 'w') as f:
                f.write(content)

        # Run 'poetry install' and log output
        poetry_bin = poetry_path + '/poetry'
        result = subprocess.run(
            [poetry_bin, 'install'],
            check=True,
            stdout=log_file,
            stderr=subprocess.STDOUT,
            text=True
        )
        imsg = "'poetry install' completed successfully."
        print(imsg)
        log_file.write(imsg+"\n")
    except Exception as e:
        imsg = f"Error: 'poetry install' failed.\nThe system may not work as expected.\nCheck {log_file.name} for details."
        # print(imsg)
        log_file.write(imsg+"\n")
        raise e


def main():
    # Ensure the log directory exists
    log_dir = '/var/log/ethercat_igh_dkms'
    os.makedirs(log_dir, exist_ok=True)
    log_file = os.path.join(log_dir, 'poetry-install.log')
    poetry_bin = None
    try:
        with open(log_file, 'w') as lf:
            poetry_bin = find_poetry_binary()
            try:
                # Install poetry with existing system
                poetry_install(lf)
            except Exception as e:
                try:
                    imsg = "Running 'poetry self update' to update the dependency manager..."
                    print(imsg, flush=True)
                    lf.write(imsg+"\n")
                    result = subprocess.run(
                        [poetry_bin, 'self update'],
                        check=True,
                        stdout=lf,
                        stderr=subprocess.STDOUT,
                        text=True
                    )
                    imsg = "'poetry self update' completed successfully."
                    print(imsg, flush=True)
                    lf.write(imsg+"\n")
                    poetry_install(lf)
                except subprocess.CalledProcessError as e:
                    imsg = "Error: 'poetry self update' failed."
                    print(imsg, flush=True)
                    lf.write(imsg+"\n")
                    imsg = "Trying to download and update to the last poetry version..."
                    print(imsg, flush=True)
                    lf.write(imsg+"\n")
                    try:
                        download_and_update_to_last_poetry_version(lf)
                    except Exception as e:
                        imsg = f"Error: An unexpected error occurred: {e}"
                        print(imsg, flush=True)
                        imsg = imsg + " ".join(
                            traceback.TracebackException.from_exception(e).format())
                        lf.write(imsg+"\n")
                        imsg = f"The system may not work as expected.\nCheck {log_file} for details."
                        print(imsg, flush=True)
                        lf.write(imsg+"\n")
                        sys.exit(1)
                # Here poetry should be updated with the last version
                poetry_install(lf)
    except Exception as e:
        if not lf.closed:
            lf.close()
        imsg = f"Error: An unexpected error occurred.\nCheck {log_file} for details."
        print(imsg, flush=True)
        with open(log_file, 'a') as lf:
            imsg = imsg + " ".join(
                traceback.TracebackException.from_exception(e).format())
            lf.write(imsg+"\n")
        sys.exit(1)


if __name__ == '__main__':
    main()
